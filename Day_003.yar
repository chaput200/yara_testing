rule SUP_READ_TEAM_GETSYSCALLID_1
{

    meta:
        author      = "@qutluch@infosec.exchange"
        description = "Rule detecting opcodes for an observed GetSyscallId function in red team tools."
        reference   = "https://github.com/nettitude/Tartarus-TpAllocInject/blob/main/TpAllocInjection/SyscallsGen.cpp#L21-L92"

        DaysofYARA  = "3/100"

        license     = "BSD-2-Clause"
        date        = "2024-01-03"
        version     = "1.0"

        hash1       = "2dc2c00880d2115b0f9cb7dc04e36fc4b93e6f0d6557b6d88e41fab0b577875b"
        hash2       = "d43442ea05eefbf73d35109eea7ace3e26713d26dc1d945bdc260480c2a0b718"
        hash3       = "ed7731e01311ab07c893293cd3e67c64d45aa8b33ac7fe344e3499417924e7e7"

    strings:
        $ = {
            0f b6 02             // 0x14000108a: movzx eax, byte [rdx]               (0f b6 02)
            3c 4c                // 0x14000108d: cmp al, 0x4c                        (3c 4c)
            75 ??                // 0x14000108f: jne 0x1400010dd                     (75 4c)
            ?? ?? 01 8b          // 0x140001091: cmp byte [rdx + 1], 0x8b            (80 7a 01 8b)
            75 ??                // 0x140001095: jne 0x1400010e5                     (75 4e)
            ?? ?? 02 d1          // 0x140001097: cmp byte [rdx + 2], 0xd1            (80 7a 02 d1)
            75 ??                // 0x14000109b: jne 0x1400010e5                     (75 48)
            ?? ?? 03 b8          // 0x14000109d: cmp byte [rdx + 3], 0xb8            (80 7a 03 b8)
            75 ??                // 0x1400010a1: jne 0x1400010e5                     (75 42)
            44 38 42 06          // 0x1400010a3: cmp byte [rdx + 6], r8b             (44 38 42 06)
            75 ??                // 0x1400010a7: jne 0x1400010eb                     (75 42)
            44 38 42 07          // 0x1400010a9: cmp byte [rdx + 7], r8b             (44 38 42 07)
            75 ??                // 0x1400010ad: jne 0x1400010eb                     (75 3c)

        }

        $ = {
            45 8b c1             // 0x140001114: mov r8d, r9d                        (45 8b c1)
            41 c1 e0 05          // 0x140001117: shl r8d, 5                          (41 c1 e0 05)
            4c 03 c2             // 0x14000111b: add r8, rdx                         (4c 03 c2)
            41 80 38 4c          // 0x14000111e: cmp byte [r8], 0x4c                 (41 80 38 4c)
            75 ??                // 0x140001122: jne 0x140001147                     (75 23)
            41 80 78 01 8b       // 0x140001124: cmp byte [r8 + 1], 0x8b             (41 80 78 01 8b)
            75 ??                // 0x140001129: jne 0x140001147                     (75 1c)
            41 80 78 02 d1       // 0x14000112b: cmp byte [r8 + 2], 0xd1             (41 80 78 02 d1)
            75 ??                // 0x140001130: jne 0x140001147                     (75 15)
            41 80 78 03 b8       // 0x140001132: cmp byte [r8 + 3], 0xb8             (41 80 78 03 b8)
            75 ??                // 0x140001137: jne 0x140001147                     (75 0e)
            41 80 78 06 ??       // 0x140001139: cmp byte [r8 + 6], 0                (41 80 78 06 00)
            75 ??                // 0x14000113e: jne 0x140001147                     (75 07)
            41 80 78 07 ??       // 0x140001140: cmp byte [r8 + 7], 0                (41 80 78 07 00)
            74 ??                // 0x140001145: je 0x140001192                      (74 4b)

        }

        $ = {
            41 80 38 4c          // 0x140001155: cmp byte [r8], 0x4c                 (41 80 38 4c)
            75 ??                // 0x140001159: jne 0x140001182                     (75 27)
            41 80 78 01 8b       // 0x14000115b: cmp byte [r8 + 1], 0x8b             (41 80 78 01 8b)
            75 ??                // 0x140001160: jne 0x140001182                     (75 20)
            41 80 78 02 d1       // 0x140001162: cmp byte [r8 + 2], 0xd1             (41 80 78 02 d1)
            75 ??                // 0x140001167: jne 0x140001182                     (75 19)
            41 80 78 03 b8       // 0x140001169: cmp byte [r8 + 3], 0xb8             (41 80 78 03 b8)
            75 ??                // 0x14000116e: jne 0x140001182                     (75 12)
            41 80 78 06 ??       // 0x140001170: cmp byte [r8 + 6], 0                (41 80 78 06 00)
            75 ??                // 0x140001175: jne 0x140001182                     (75 0b)
            41 80 78 07 ??       // 0x140001177: cmp byte [r8 + 7], 0                (41 80 78 07 00)
            0f 84 ?? ?? ?? ??    // 0x14000117c: je 0x14000125b                      (0f 84 d9 00 00 00)

        }

        $ = {
            41 80 38 4c          // 0x1400011ce: cmp byte [r8], 0x4c                 (41 80 38 4c)
            75 ??                // 0x1400011d2: jne 0x1400011f7                     (75 23)
            41 80 78 01 8b       // 0x1400011d4: cmp byte [r8 + 1], 0x8b             (41 80 78 01 8b)
            75 ??                // 0x1400011d9: jne 0x1400011f7                     (75 1c)
            41 80 78 02 d1       // 0x1400011db: cmp byte [r8 + 2], 0xd1             (41 80 78 02 d1)
            75 ??                // 0x1400011e0: jne 0x1400011f7                     (75 15)
            41 80 78 03 b8       // 0x1400011e2: cmp byte [r8 + 3], 0xb8             (41 80 78 03 b8)
            75 ??                // 0x1400011e7: jne 0x1400011f7                     (75 0e)
            41 80 78 06 ??       // 0x1400011e9: cmp byte [r8 + 6], 0                (41 80 78 06 00)
            75 ??                // 0x1400011ee: jne 0x1400011f7                     (75 07)
            41 80 78 07 ??       // 0x1400011f0: cmp byte [r8 + 7], 0                (41 80 78 07 00)
            74 ??                // 0x1400011f5: je 0x14000123e                      (74 47)

        }

        $ = {
            41 80 38 4c          // 0x140001205: cmp byte [r8], 0x4c                 (41 80 38 4c)
            75 ??                // 0x140001209: jne 0x14000122e                     (75 23)
            41 80 78 01 8b       // 0x14000120b: cmp byte [r8 + 1], 0x8b             (41 80 78 01 8b)
            75 ??                // 0x140001210: jne 0x14000122e                     (75 1c)
            41 80 78 02 d1       // 0x140001212: cmp byte [r8 + 2], 0xd1             (41 80 78 02 d1)
            75 ??                // 0x140001217: jne 0x14000122e                     (75 15)
            41 80 78 03 b8       // 0x140001219: cmp byte [r8 + 3], 0xb8             (41 80 78 03 b8)
            75 ??                // 0x14000121e: jne 0x14000122e                     (75 0e)
            41 80 78 06 ??       // 0x140001220: cmp byte [r8 + 6], 0                (41 80 78 06 00)
            75 ??                // 0x140001225: jne 0x14000122e                     (75 07)
            41 80 78 07 ??       // 0x140001227: cmp byte [r8 + 7], 0                (41 80 78 07 00)
            74 ??                // 0x14000122c: je 0x14000125b                      (74 2d)

        }

    condition:
        uint16(0) == 0x5A4D
        and (uint32(uint32(0x3C)) == 0x00004550)
        and all of them
        and filesize < 10MB
}
